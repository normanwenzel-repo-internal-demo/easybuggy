--- original
+++ remediated
@@ -0,0 +0,0 @@
 package org.t246osslab.easybuggy.core.utils;
 
@@ -3,0 +3,6 @@
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.FileOutputStream;
+import java.io.File;
+import javax.servlet.http.Part;
+import java.io.OutputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.servlet.http.Part;
 import java.io.*;
 
 /**
  * Utility class to handle multi part files.
  */
 public final class MultiPartFileUtils {
 
     private static final Logger log = LoggerFactory.getLogger(MultiPartFileUtils.class);
 
     // squid:S1118: Utility classes should not have public constructors
     private MultiPartFileUtils() {
         throw new IllegalAccessError("Utility class");
     }
 
     /**
      * Write uploaded file to the given path.
      *
      * @param part A part or form item that was received within a <code>multipart/form-data</code> POST request.
      * @param savePath Path to save an uploaded file.
      * @param fileName The uploaded file name.
      */
@@ -28,11 +34,26 @@
-    public static boolean writeFile(Part part, String savePath, String fileName) throws IOException {
-        boolean isConverted = false;
-        OutputStream out = null;
-        InputStream in = null;
-        try {
-            out = new FileOutputStream(savePath + File.separator + fileName);
-            in = part.getInputStream();
-            int read;
-            final byte[] bytes = new byte[1024];
-            while ((read = in.read(bytes)) != -1) {
-                out.write(bytes, 0, read);
+      String normalizedSavePath = new File(savePath).getCanonicalPath();
+      String normalizedFileName = new File(fileName).getName();
+      String fullPath = normalizedSavePath + File.separator + normalizedFileName;
+      if (!fullPath.startsWith(new File(BASE_DIRECTORY).getCanonicalPath())) {
+        throw new SecurityException("Attempt to write file outside of the base directory.");
+      }
+      OutputStream out = null;
+      InputStream in = null;
+      try {
+          out = new FileOutputStream(fullPath);
+          in = part.getInputStream();
+          int read;
+          final byte[] bytes = new byte[1024];
+          while ((read = in.read(bytes)) != -1) {
+              out.write(bytes, 0, read);
+          }
+          isConverted = true;
+      } finally {
+          if (in != null) {
+              in.close();
+          }
+          if (out != null) {
+              out.close();
+          }
+      }
+
             }
         } catch (FileNotFoundException e) {
             // Ignore because file already exists (converted and Windows locked the file)
             log.debug("Exception occurs: ", e);
             isConverted = true;
         } finally {
             Closer.close(out, in);
         }
         return isConverted;
     }
 
 
     /**
      * Retrieves file name of a upload part from its HTTP header
      *
      * @param part A part or form item that was received within a <code>multipart/form-data</code> POST request.
      */
     public static String getFileName(final Part part) {
         for (String content : part.getHeader("content-disposition").split(";")) {
             if (content.trim().startsWith("filename")) {
                 return content.substring(content.indexOf('=') + 1).trim().replace("\"", "");
             }
         }
         return null;
     }
 }